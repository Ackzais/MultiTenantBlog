@model MultiTenantBlog.Models.BlogPost
@{
    ViewData["Title"] = "Yazıyı Düzenle";
    var categories = ViewBag.Categories as IEnumerable<dynamic>;
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h2 mb-1">
                    <i class="fas fa-edit me-2 text-warning"></i>
                    Yazıyı Düzenle
                </h1>
                <p class="text-muted mb-0">
                    <strong>@Model.Title</strong> yazısını düzenliyorsunuz
                </p>
            </div>
            <div>
                <a href="@Url.Action("Details", "Home", new { id = Model.Id })" 
                   class="btn btn-outline-info" target="_blank">
                    <i class="fas fa-external-link-alt me-1"></i>Yazıyı Görüntüle
                </a>
                <a href="@Url.Action("Posts")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Blog Yazıları
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Validation Summary -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        <strong>Lütfen aşağıdaki hataları düzeltin:</strong>
        <ul class="mb-0 mt-2">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

<!-- Main Form -->
<form asp-action="EditPost" method="post" id="editPostForm">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.TenantId)
    @Html.HiddenFor(m => m.PublishedDate)
    
    <div class="row">
        <!-- Left Column - Main Content -->
        <div class="col-lg-8">
            <!-- Version Info Card -->
            <div class="alert alert-info mb-4" role="alert">
                <div class="row align-items-center">
                    <div class="col-md-6">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>İlk Yayın:</strong> @Model.PublishedDate.ToString("dd MMMM yyyy, HH:mm", new System.Globalization.CultureInfo("tr-TR"))
                    </div>
                    <div class="col-md-6 text-md-end">
                        @if (Model.UpdatedDate.HasValue)
                        {
                            <i class="fas fa-edit me-2"></i>
                            <strong>Son Güncelleme:</strong> @Model.UpdatedDate.Value.ToString("dd MMMM yyyy, HH:mm", new System.Globalization.CultureInfo("tr-TR"))
                        }
                        else
                        {
                            <small class="text-muted">Henüz güncellenmemiş</small>
                        }
                    </div>
                </div>
            </div>

            <!-- Basic Information Card -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-warning">
                        <i class="fas fa-info-circle me-2"></i>Temel Bilgiler
                    </h6>
                </div>
                <div class="card-body">
                    <!-- Title -->
                    <div class="mb-4">
                        <label asp-for="Title" class="form-label fw-bold">
                            <i class="fas fa-heading me-2"></i>Yazı Başlığı *
                        </label>
                        <input asp-for="Title" class="form-control form-control-lg" 
                               placeholder="Yazınızın çekici başlığını buraya yazın..."
                               maxlength="200" />
                        <span asp-validation-for="Title" class="text-danger small"></span>
                        <div class="form-text">
                            <small class="text-muted">
                                <span id="titleCounter">@Model.Title?.Length</span>/200 karakter
                            </small>
                        </div>
                    </div>

                    <!-- Summary -->
                    <div class="mb-4">
                        <label asp-for="Summary" class="form-label fw-bold">
                            <i class="fas fa-align-left me-2"></i>Özet
                            <small class="text-muted">(Opsiyonel)</small>
                        </label>
                        <textarea asp-for="Summary" class="form-control" rows="3" 
                                  placeholder="Yazınızın kısa özetini buraya yazabilirsiniz. Boş bırakılırsa otomatik oluşturulur."
                                  maxlength="500"></textarea>
                        <span asp-validation-for="Summary" class="text-danger small"></span>
                        <div class="form-text">
                            <small class="text-muted">
                                <span id="summaryCounter">@(Model.Summary?.Length ?? 0)</span>/500 karakter • Boş bırakılırsa içerikten otomatik oluşturulur
                            </small>
                        </div>
                    </div>

                    <!-- Author -->
                    <div class="mb-4">
                        <label asp-for="Author" class="form-label fw-bold">
                            <i class="fas fa-user me-2"></i>Yazar
                        </label>
                        <input asp-for="Author" class="form-control" 
                               placeholder="Yazarın adını girin..."
                               maxlength="100" />
                        <span asp-validation-for="Author" class="text-danger small"></span>
                    </div>
                </div>
            </div>

            <!-- Content Card -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-warning">
                        <i class="fas fa-edit me-2"></i>İçerik
                    </h6>
                </div>
                <div class="card-body">
                    <!-- Content Toolbar -->
                    <div class="mb-3">
                        <div class="btn-toolbar" role="toolbar">
                            <div class="btn-group btn-group-sm me-2" role="group">
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('bold')" title="Kalın">
                                    <i class="fas fa-bold"></i>
                                </button>
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('italic')" title="İtalik">
                                    <i class="fas fa-italic"></i>
                                </button>
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('underline')" title="Altı Çizili">
                                    <i class="fas fa-underline"></i>
                                </button>
                            </div>
                            <div class="btn-group btn-group-sm me-2" role="group">
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('h2')" title="Başlık 2">
                                    <i class="fas fa-heading"></i> H2
                                </button>
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('h3')" title="Başlık 3">
                                    <i class="fas fa-heading"></i> H3
                                </button>
                            </div>
                            <div class="btn-group btn-group-sm me-2" role="group">
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('ul')" title="Madde Listesi">
                                    <i class="fas fa-list-ul"></i>
                                </button>
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('ol')" title="Numaralı Liste">
                                    <i class="fas fa-list-ol"></i>
                                </button>
                            </div>
                            <div class="btn-group btn-group-sm" role="group">
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('link')" title="Link Ekle">
                                    <i class="fas fa-link"></i>
                                </button>
                                <button type="button" class="btn btn-outline-secondary" 
                                        onclick="formatText('code')" title="Kod">
                                    <i class="fas fa-code"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Content Textarea -->
                    <div class="mb-3">
                        <label asp-for="Content" class="form-label fw-bold">
                            <i class="fas fa-file-alt me-2"></i>Yazı İçeriği *
                        </label>
                        <textarea asp-for="Content" class="form-control" 
                                  rows="15" 
                                  placeholder="Yazınızın tam içeriğini buraya yazın. HTML etiketleri kullanabilirsiniz..."
                                  id="contentEditor"></textarea>
                        <span asp-validation-for="Content" class="text-danger small"></span>
                        <div class="form-text">
                            <small class="text-muted">
                                HTML etiketleri desteklenir. Temel formatlar için yukarıdaki araç çubuğunu kullanabilirsiniz.
                            </small>
                        </div>
                    </div>

                    <!-- Preview Section -->
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-info btn-sm" 
                                onclick="togglePreview()">
                            <i class="fas fa-eye me-1"></i>
                            <span id="previewButtonText">Önizleme Göster</span>
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm ms-2" 
                                onclick="revertChanges()">
                            <i class="fas fa-undo me-1"></i>Değişiklikleri Geri Al
                        </button>
                    </div>

                    <!-- Preview Area (Initially Hidden) -->
                    <div id="previewArea" class="border rounded p-3 bg-light" style="display: none;">
                        <h6 class="text-muted mb-2">
                            <i class="fas fa-eye me-2"></i>İçerik Önizlemesi:
                        </h6>
                        <div id="previewContent" class="bg-white p-3 rounded border">
                            <!-- Preview content will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column - Settings -->
        <div class="col-lg-4">
            <!-- Current Status Card -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold">
                        <i class="fas fa-info me-2"></i>Mevcut Durum
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <strong>Durum:</strong>
                        @if (Model.IsPublished)
                        {
                            <span class="badge bg-success ms-2">
                                <i class="fas fa-eye me-1"></i>Yayında
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-warning ms-2">
                                <i class="fas fa-edit me-1"></i>Taslak
                            </span>
                        }
                    </div>
                    <div class="mb-3">
                        <strong>Kategori:</strong>
                        <span class="badge ms-2" style="background-color: @ViewBag.CurrentCategory?.Color; color: white;">
                            @ViewBag.CurrentCategory?.Name
                        </span>
                    </div>
                    <div class="mb-0">
                        <small class="text-muted">
                            <strong>ID:</strong> @Model.Id<br>
                            <strong>Oluşturulma:</strong> @Model.PublishedDate.ToString("dd/MM/yyyy HH:mm")
                        </small>
                    </div>
                </div>
            </div>

            <!-- Update Settings Card -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-success">
                        <i class="fas fa-cog me-2"></i>Güncelleme Ayarları
                    </h6>
                </div>
                <div class="card-body">
                    <!-- Category -->
                    <div class="mb-4">
                        <label asp-for="CategoryId" class="form-label fw-bold">
                            <i class="fas fa-tag me-2"></i>Kategori *
                        </label>
                        @if (categories != null && categories.Any())
                        {
                            <select asp-for="CategoryId" class="form-select">
                                <option value="">Kategori seçin...</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id" 
                                            selected="@(category.Id == Model.CategoryId ? "selected" : null)">
                                        @category.Name
                                    </option>
                                }
                            </select>
                        }
                        else
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                Kategori bulunamadı. 
                                <a href="@Url.Action("CreateCategory")" class="alert-link">
                                    Yeni kategori oluşturun.
                                </a>
                            </div>
                        }
                        <span asp-validation-for="CategoryId" class="text-danger small"></span>
                    </div>

                    <!-- Publish Status -->
                    <div class="mb-4">
                        <label class="form-label fw-bold">
                            <i class="fas fa-eye me-2"></i>Yayın Durumu
                        </label>
                        <div class="form-check">
                            <input asp-for="IsPublished" class="form-check-input" type="checkbox" 
                                   id="publishCheckbox" />
                            <label class="form-check-label" for="publishCheckbox">
                                <span id="publishLabel">
                                    @(Model.IsPublished ? "Yayında tut" : "Yayınla")
                                </span>
                            </label>
                        </div>
                        <div class="form-text">
                            <small class="text-muted" id="publishHelp">
                                @if (Model.IsPublished)
                                {
                                    <text>İşaretli ise yazı yayında kalmaya devam eder.</text>
                                }
                                else
                                {
                                    <text>İşaretlerseniz yazı yayınlanır.</text>
                                }
                            </small>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-warning btn-lg">
                            <i class="fas fa-save me-2"></i>
                            <span id="saveButtonText">Değişiklikleri Kaydet</span>
                        </button>
                        <button type="button" class="btn btn-outline-info" 
                                onclick="previewPost()">
                            <i class="fas fa-external-link-alt me-2"></i>Yazıyı Görüntüle
                        </button>
                        <a href="@Url.Action("Posts")" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-2"></i>İptal
                        </a>
                    </div>
                </div>
            </div>

            <!-- Changes Summary Card -->
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-info">
                        <i class="fas fa-history me-2"></i>Değişiklik Özeti
                    </h6>
                </div>
                <div class="card-body">
                    <div id="changesSummary">
                        <p class="text-muted mb-0">
                            <i class="fas fa-info-circle me-2"></i>
                            Henüz değişiklik yapılmadı
                        </p>
                    </div>
                    
                    <div class="mt-3 pt-3 border-top">
                        <h6 class="text-primary">💡 İpuçları:</h6>
                        <ul class="small text-muted mb-0">
                            <li>Başlık değişiklikleri SEO'yu etkiler</li>
                            <li>İçerik önizlemesini kontrol edin</li>
                            <li>Kategori değişikliği organize etmeyi sağlar</li>
                            <li>Taslak modu test için kullanışlıdır</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- Revert Changes Modal -->
<div class="modal fade" id="revertModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-undo me-2 text-warning"></i>Değişiklikleri Geri Al
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Tüm değişiklikleri geri almak istediğinizden emin misiniz?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Uyarı:</strong> Bu işlem kaydetmediğiniz tüm değişiklikleri siler!
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    İptal
                </button>
                <button type="button" class="btn btn-warning" onclick="confirmRevert()">
                    <i class="fas fa-undo me-1"></i>Evet, Geri Al
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Store original values for change detection and revert
        const originalValues = {
            title: '@Html.Raw(Html.Encode(Model.Title))',
            summary: '@Html.Raw(Html.Encode(Model.Summary ?? ""))',
            content: '@Html.Raw(Html.Encode(Model.Content))',
            author: '@Html.Raw(Html.Encode(Model.Author))',
            categoryId: '@Model.CategoryId',
            isPublished: @Model.IsPublished.ToString().ToLower()
        };

        // Character counters
        document.getElementById('Title').addEventListener('input', function() {
            updateCharacterCounter('Title', 'titleCounter', 200);
            detectChanges();
        });

        document.getElementById('Summary').addEventListener('input', function() {
            updateCharacterCounter('Summary', 'summaryCounter', 500);
            detectChanges();
        });

        document.getElementById('contentEditor').addEventListener('input', function() {
            detectChanges();
        });

        document.getElementById('Author').addEventListener('input', function() {
            detectChanges();
        });

        document.querySelector('select[name="CategoryId"]').addEventListener('change', function() {
            detectChanges();
        });

        // Publish checkbox behavior
        document.getElementById('publishCheckbox').addEventListener('change', function() {
            const label = document.getElementById('publishLabel');
            const help = document.getElementById('publishHelp');
            const button = document.getElementById('saveButtonText');
            
            if (this.checked) {
                label.textContent = 'Yayında tut';
                help.textContent = 'Yazı yayında kalacak veya yayınlanacak.';
            } else {
                label.textContent = 'Yayından kaldır / Taslağa çevir';
                help.textContent = 'Yazı yayından kaldırılacak veya taslak olarak kalacak.';
            }
            
            detectChanges();
        });

        // Character counter function
        function updateCharacterCounter(fieldId, counterId, maxLength) {
            const field = document.getElementById(fieldId);
            const counter = document.getElementById(counterId);
            const length = field.value.length;
            
            counter.textContent = length;
            
            if (length > maxLength * 0.9) {
                counter.classList.add('text-warning');
            } else {
                counter.classList.remove('text-warning');
            }
            
            if (length >= maxLength) {
                counter.classList.add('text-danger');
                counter.classList.remove('text-warning');
            } else {
                counter.classList.remove('text-danger');
            }
        }

        // Change detection
        function detectChanges() {
            const currentValues = {
                title: document.getElementById('Title').value,
                summary: document.getElementById('Summary').value,
                content: document.getElementById('contentEditor').value,
                author: document.getElementById('Author').value,
                categoryId: document.querySelector('select[name="CategoryId"]').value,
                isPublished: document.getElementById('publishCheckbox').checked
            };

            const changes = [];
            
            if (currentValues.title !== originalValues.title) {
                changes.push('Başlık');
            }
            if (currentValues.summary !== originalValues.summary) {
                changes.push('Özet');
            }
            if (currentValues.content !== originalValues.content) {
                changes.push('İçerik');
            }
            if (currentValues.author !== originalValues.author) {
                changes.push('Yazar');
            }
            if (currentValues.categoryId !== originalValues.categoryId) {
                changes.push('Kategori');
            }
            if (currentValues.isPublished !== originalValues.isPublished) {
                changes.push('Yayın Durumu');
            }

            updateChangesSummary(changes);
        }

        // Update changes summary
        function updateChangesSummary(changes) {
            const summaryDiv = document.getElementById('changesSummary');
            
            if (changes.length === 0) {
                summaryDiv.innerHTML = `
                    <p class="text-muted mb-0">
                        <i class="fas fa-info-circle me-2"></i>
                        Henüz değişiklik yapılmadı
                    </p>
                `;
            } else {
                summaryDiv.innerHTML = `
                    <p class="text-warning mb-2">
                        <i class="fas fa-edit me-2"></i>
                        <strong>${changes.length} değişiklik tespit edildi:</strong>
                    </p>
                    <ul class="mb-0 small">
                        ${changes.map(change => `<li>${change}</li>`).join('')}
                    </ul>
                `;
            }
        }

        // Format text functions (same as CreatePost)
        function formatText(format) {
            const textarea = document.getElementById('contentEditor');
            const start = textarea.selectionStart;
            const end = textarea.selectionEnd;
            const selectedText = textarea.value.substring(start, end);
            
            let formattedText = '';
            
            switch (format) {
                case 'bold':
                    formattedText = `<strong>${selectedText || 'kalın metin'}</strong>`;
                    break;
                case 'italic':
                    formattedText = `<em>${selectedText || 'italik metin'}</em>`;
                    break;
                case 'underline':
                    formattedText = `<u>${selectedText || 'altı çizili metin'}</u>`;
                    break;
                case 'h2':
                    formattedText = `<h2>${selectedText || 'Ana Başlık'}</h2>`;
                    break;
                case 'h3':
                    formattedText = `<h3>${selectedText || 'Alt Başlık'}</h3>`;
                    break;
                case 'ul':
                    formattedText = `<ul>\n  <li>${selectedText || 'Madde 1'}</li>\n  <li>Madde 2</li>\n</ul>`;
                    break;
                case 'ol':
                    formattedText = `<ol>\n  <li>${selectedText || 'İlk madde'}</li>\n  <li>İkinci madde</li>\n</ol>`;
                    break;
                case 'link':
                    const url = prompt('Link URL\'sini girin:', 'https://');
                    if (url) {
                        formattedText = `<a href="${url}" target="_blank">${selectedText || 'Link metni'}</a>`;
                    }
                    break;
                case 'code':
                    formattedText = `<code>${selectedText || 'kod parçası'}</code>`;
                    break;
            }
            
            if (formattedText) {
                textarea.value = textarea.value.substring(0, start) + formattedText + textarea.value.substring(end);
                
                const newPosition = start + formattedText.length;
                textarea.setSelectionRange(newPosition, newPosition);
                textarea.focus();
                detectChanges();
            }
        }

        // Preview functionality
        let previewVisible = false;
        
        function togglePreview() {
            const previewArea = document.getElementById('previewArea');
            const previewContent = document.getElementById('previewContent');
            const previewButton = document.getElementById('previewButtonText');
            const content = document.getElementById('contentEditor').value;
            
            if (!previewVisible) {
                previewContent.innerHTML = content || '<p class="text-muted">İçerik henüz girilmemiş...</p>';
                previewArea.style.display = 'block';
                previewButton.textContent = 'Önizlemeyi Gizle';
                previewVisible = true;
            } else {
                previewArea.style.display = 'none';
                previewButton.textContent = 'Önizleme Göster';
                previewVisible = false;
            }
        }

        // Revert changes
        function revertChanges() {
            const modal = new bootstrap.Modal(document.getElementById('revertModal'));
            modal.show();
        }

        function confirmRevert() {
            document.getElementById('Title').value = originalValues.title;
            document.getElementById('Summary').value = originalValues.summary;
            document.getElementById('contentEditor').value = originalValues.content;
            document.getElementById('Author').value = originalValues.author;
            document.querySelector('select[name="CategoryId"]').value = originalValues.categoryId;
            document.getElementById('publishCheckbox').checked = originalValues.isPublished;
            
            // Update character counters
            updateCharacterCounter('Title', 'titleCounter', 200);
            updateCharacterCounter('Summary', 'summaryCounter', 500);
            
            // Update changes summary
            detectChanges();
            
            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('revertModal'));
            modal.hide();
            
            // Show notification
            showNotification('Tüm değişiklikler geri alındı', 'info');
        }

        // Preview post in new tab
        function previewPost() {
            window.open('@Url.Action("Details", "Home", new { id = Model.Id })', '_blank');
        }

        // Form validation
        document.getElementById('editPostForm').addEventListener('submit', function(e) {
            const title = document.getElementById('Title').value.trim();
            const content = document.getElementById('contentEditor').value.trim();
            const category = document.querySelector('select[name="CategoryId"]').value;
            
            if (!title) {
                e.preventDefault();
                showNotification('Yazı başlığı zorunludur.', 'error');
                document.getElementById('Title').focus();
                return;
            }
            
            if (!content) {
                e.preventDefault();
                showNotification('Yazı içeriği zorunludur.', 'error');
                document.getElementById('contentEditor').focus();
                return;
            }
            
            if (!category) {
                e.preventDefault();
                showNotification('Kategori seçimi zorunludur.', 'error');
                return;
            }
            
            // Show loading state
            const submitButton = document.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Güncelleniyor...';
            submitButton.disabled = true;
            
            // Re-enable button after 10 seconds (in case of slow response)
            setTimeout(() => {
                submitButton.innerHTML = originalText;
                submitButton.disabled = false;
            }, 10000);
        });

        // Show notification
        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 
                              type === 'error' ? 'alert-danger' : 'alert-info';
            const icon = type === 'success' ? 'fa-check-circle' : 
                        type === 'error' ? 'fa-exclamation-triangle' : 'fa-info-circle';
            
            const alert = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="fas ${icon} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the page
            const container = document.querySelector('.row');
            container.insertAdjacentHTML('beforebegin', alert);
            
            // Scroll to top
            window.scrollTo(0, 0);
            
            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                const alertElement = document.querySelector('.alert');
                if (alertElement) {
                    const closeButton = alertElement.querySelector('.btn-close');
                    if (closeButton) {
                        closeButton.click();
                    }
                }
            }, 5000);
        }

        // Auto-save to localStorage (optional feature)
        let autoSaveInterval;
        
        function startAutoSave() {
            autoSaveInterval = setInterval(() => {
                const formData = {
                    id: @Model.Id,
                    title: document.getElementById('Title').value,
                    summary: document.getElementById('Summary').value,
                    content: document.getElementById('contentEditor').value,
                    author: document.getElementById('Author').value,
                    categoryId: document.querySelector('select[name="CategoryId"]').value,
                    isPublished: document.getElementById('publishCheckbox').checked,
                    timestamp: new Date().getTime()
                };
                
                localStorage.setItem(`blogPostEdit_${@Model.Id}`, JSON.stringify(formData));
                
                // Show subtle indication that auto-save occurred
                const saveIndicator = document.getElementById('autoSaveIndicator');
                if (saveIndicator) {
                    saveIndicator.style.display = 'inline';
                    setTimeout(() => {
                        saveIndicator.style.display = 'none';
                    }, 2000);
                }
            }, 30000); // Auto-save every 30 seconds
        }
        
        function loadAutoSave() {
            const saved = localStorage.getItem(`blogPostEdit_${@Model.Id}`);
            if (saved) {
                const data = JSON.parse(saved);
                const now = new Date().getTime();
                
                // Only load if saved within last 24 hours and has changes
                if (now - data.timestamp < 24 * 60 * 60 * 1000) {
                    const hasChanges = 
                        data.title !== originalValues.title ||
                        data.summary !== originalValues.summary ||
                        data.content !== originalValues.content ||
                        data.author !== originalValues.author ||
                        data.categoryId !== originalValues.categoryId ||
                        data.isPublished !== originalValues.isPublished;
                        
                    if (hasChanges && confirm('Daha önce kaydedilmiş değişiklikler bulundu. Yüklemek ister misiniz?')) {
                        document.getElementById('Title').value = data.title || '';
                        document.getElementById('Summary').value = data.summary || '';
                        document.getElementById('contentEditor').value = data.content || '';
                        document.getElementById('Author').value = data.author || 'Admin';
                        document.getElementById('publishCheckbox').checked = data.isPublished || false;
                        
                        if (data.categoryId) {
                            document.querySelector('select[name="CategoryId"]').value = data.categoryId;
                        }
                        
                        // Update character counters and change detection
                        updateCharacterCounter('Title', 'titleCounter', 200);
                        updateCharacterCounter('Summary', 'summaryCounter', 500);
                        detectChanges();
                        
                        showNotification('Önceki değişiklikler geri yüklendi', 'info');
                    }
                }
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize character counters
            updateCharacterCounter('Title', 'titleCounter', 200);
            updateCharacterCounter('Summary', 'summaryCounter', 500);
            
            // Initialize change detection
            detectChanges();
            
            // Load auto-save if exists
            loadAutoSave();
            
            // Start auto-save
            startAutoSave();
            
            // Add auto-save indicator to page
            const saveButton = document.querySelector('button[type="submit"]');
            if (saveButton) {
                saveButton.insertAdjacentHTML('afterend', `
                    <small id="autoSaveIndicator" class="text-muted ms-2" style="display: none;">
                        <i class="fas fa-save me-1"></i>Otomatik kaydedildi
                    </small>
                `);
            }
        });

        // Clear auto-save on successful submit
        document.getElementById('editPostForm').addEventListener('submit', function() {
            localStorage.removeItem(`blogPostEdit_${@Model.Id}`);
            clearInterval(autoSaveInterval);
        });

        // Warn user about unsaved changes before leaving
        window.addEventListener('beforeunload', function(e) {
            const currentValues = {
                title: document.getElementById('Title').value,
                summary: document.getElementById('Summary').value,
                content: document.getElementById('contentEditor').value,
                author: document.getElementById('Author').value,
                categoryId: document.querySelector('select[name="CategoryId"]').value,
                isPublished: document.getElementById('publishCheckbox').checked
            };

            const hasChanges = 
                currentValues.title !== originalValues.title ||
                currentValues.summary !== originalValues.summary ||
                currentValues.content !== originalValues.content ||
                currentValues.author !== originalValues.author ||
                currentValues.categoryId !== originalValues.categoryId ||
                currentValues.isPublished !== originalValues.isPublished;

            if (hasChanges) {
                e.preventDefault();
                e.returnValue = 'Kaydedilmemiş değişiklikleriniz var. Sayfayı kapatmak istediğinizden emin misiniz?';
                return e.returnValue;
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            // Ctrl+S or Cmd+S to save
            if ((e.ctrlKey || e.metaKey) && e.key === 's') {
                e.preventDefault();
                document.getElementById('editPostForm').submit();
            }
            
            // Ctrl+Z or Cmd+Z to revert (when not in textarea)
            if ((e.ctrlKey || e.metaKey) && e.key === 'z' && e.target.tagName !== 'TEXTAREA') {
                e.preventDefault();
                revertChanges();
            }
            
            // Ctrl+P or Cmd+P to preview
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                previewPost();
            }
        });
    </script>

    <style>
        .card {
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            border: none;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: #f6c23e;
            box-shadow: 0 0 0 0.2rem rgba(246, 194, 62, 0.25);
        }
        
        .btn-toolbar .btn-group {
            margin-bottom: 0.5rem;
        }
        
        .btn-outline-secondary:hover {
            background-color: #6c757d;
            border-color: #6c757d;
        }
        
        #contentEditor {
            font-family: 'Courier New', monospace;
            resize: vertical;
        }
        
        .text-warning {
            color: #f6c23e !important;
        }
        
        .text-danger {
            color: #e74a3b !important;
        }
        
        .alert {
            border: none;
            border-radius: 0.375rem;
        }
        
        .form-check-input:checked {
            background-color: #f6c23e;
            border-color: #f6c23e;
        }
        
        code {
            color: #e83e8c;
            background-color: #f8f9fa;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
        }
        
        .badge {
            font-size: 0.75rem;
        }
        
        /* Change highlight animations */
        .changed {
            background-color: #fff3cd !important;
            border-color: #f6c23e !important;
            transition: all 0.3s ease;
        }
        
        /* Auto-save indicator */
        #autoSaveIndicator {
            animation: fadeInOut 0.5s ease-in-out;
        }
        
    </style>
    <style>
        @@keyframes fadeInOut {
        0%   { opacity: 0; }
        50%  { opacity: 1; }
        100% { opacity: 0.7; }
        }
    </style>

}