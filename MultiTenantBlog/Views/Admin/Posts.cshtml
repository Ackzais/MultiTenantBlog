@model IEnumerable<MultiTenantBlog.Models.BlogPost>
@{
    ViewData["Title"] = "Blog Yazıları";
}

<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h2 mb-1">
                    <i class="fas fa-file-alt me-2 text-primary"></i>
                    Blog Yazıları
                </h1>
                <p class="text-muted mb-0">Tüm blog yazılarınızı buradan yönetebilirsiniz</p>
            </div>
            <div>
                <a href="@Url.Action("CreatePost")" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i>Yeni Yazı Ekle
                </a>
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-1"></i>Dashboard
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>@TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<!-- Filter and Search Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" class="form-control" id="searchInput" 
                                   placeholder="Yazı başlığında ara...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="statusFilter">
                            <option value="">Tüm Durumlar</option>
                            <option value="published">Yayında</option>
                            <option value="draft">Taslak</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="categoryFilter">
                            <option value="">Tüm Kategoriler</option>
                            @if (Model != null && Model.Any())
                            {
                                var categories = Model.Select(p => p.Category).Distinct().ToList();
                                foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                            <i class="fas fa-times me-1"></i>Temizle
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Posts List -->
<div class="row">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-header py-3 d-flex justify-content-between align-items-center">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-list me-2"></i>
                    Blog Yazıları (@(Model?.Count() ?? 0) adet)
                </h6>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" 
                            data-bs-toggle="dropdown">
                        <i class="fas fa-cog me-1"></i>Toplu İşlemler
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="bulkPublish()">
                            <i class="fas fa-eye me-2"></i>Seçilenleri Yayınla
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="bulkUnpublish()">
                            <i class="fas fa-eye-slash me-2"></i>Seçilenleri Taslağa Çevir
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="#" onclick="bulkDelete()">
                            <i class="fas fa-trash me-2"></i>Seçilenleri Sil
                        </a></li>
                    </ul>
                </div>
            </div>
            <div class="card-body p-0">
                @if (Model != null && Model.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="postsTable">
                            <thead class="table-light">
                                <tr>
                                    <th style="width: 40px;">
                                        <input type="checkbox" id="selectAll" class="form-check-input">
                                    </th>
                                    <th>Başlık</th>
                                    <th style="width: 150px;">Kategori</th>
                                    <th style="width: 100px;">Durum</th>
                                    <th style="width: 120px;">Yazar</th>
                                    <th style="width: 120px;">Tarih</th>
                                    <th style="width: 150px;">İşlemler</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var post in Model.OrderByDescending(p => p.PublishedDate))
                                {
                                    <tr data-post-id="@post.Id" 
                                        data-status="@(post.IsPublished ? "published" : "draft")"
                                        data-category-id="@post.CategoryId">
                                        <td>
                                            <input type="checkbox" class="form-check-input post-checkbox" 
                                                   value="@post.Id">
                                        </td>
                                        <td>
                                            <div>
                                                <h6 class="mb-1">
                                                    <a href="@Url.Action("Details", "Home", new { id = post.Id })" 
                                                       target="_blank" class="text-decoration-none">
                                                        @post.Title
                                                    </a>
                                                </h6>
                                                @if (!string.IsNullOrEmpty(post.Summary))
                                                {
                                                    <small class="text-muted">
                                                        @(post.Summary.Length > 100 ? post.Summary.Substring(0, 100) + "..." : post.Summary)
                                                    </small>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge" style="background-color: @post.Category.Color; color: white;">
                                                <i class="fas fa-tag me-1"></i>@post.Category.Name
                                            </span>
                                        </td>
                                        <td>
                                            <div class="form-check form-switch">
                                                <input class="form-check-input status-toggle" type="checkbox" 
                                                       @(post.IsPublished ? "checked" : "") 
                                                       data-post-id="@post.Id"
                                                       onchange="togglePublishStatus(@post.Id, this)">
                                                <label class="form-check-label">
                                                    <span class="status-text-@post.Id">
                                                        @(post.IsPublished ? "Yayında" : "Taslak")
                                                    </span>
                                                </label>
                                            </div>
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                <i class="fas fa-user me-1"></i>@post.Author
                                            </small>
                                        </td>
                                        <td>
                                            <div>
                                                <small class="d-block">
                                                    <i class="fas fa-calendar me-1"></i>
                                                    @post.PublishedDate.ToString("dd/MM/yyyy")
                                                </small>
                                                <small class="text-muted">
                                                    @post.PublishedDate.ToString("HH:mm")
                                                </small>
                                                @if (post.UpdatedDate.HasValue)
                                                {
                                                    <small class="d-block text-info">
                                                        <i class="fas fa-edit me-1"></i>
                                                        @post.UpdatedDate.Value.ToString("dd/MM/yyyy")
                                                    </small>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <!-- View Button -->
                                                <a href="@Url.Action("Details", "Home", new { id = post.Id })" 
                                                   class="btn btn-outline-info" 
                                                   title="Görüntüle" target="_blank">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <!-- Edit Button -->
                                                <a href="@Url.Action("EditPost", new { id = post.Id })" 
                                                   class="btn btn-outline-warning" 
                                                   title="Düzenle">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <!-- Delete Button -->
                                                <button type="button" class="btn btn-outline-danger" 
                                                        title="Sil"
                                                        onclick="deletePost(@post.Id, '@post.Title')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <!-- Empty State -->
                    <div class="text-center py-5">
                        <i class="fas fa-file-alt fa-4x text-muted mb-4"></i>
                        <h4 class="text-muted">Henüz blog yazısı yok</h4>
                        <p class="text-muted mb-4">İlk blog yazınızı oluşturarak başlayın</p>
                        <a href="@Url.Action("CreatePost")" class="btn btn-primary">
                            <i class="fas fa-plus me-2"></i>İlk Yazını Ekle
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-trash me-2 text-danger"></i>Yazıyı Sil
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Bu blog yazısını silmek istediğinizden emin misiniz?</p>
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Uyarı:</strong> Bu işlem geri alınamaz!
                </div>
                <p><strong>Yazı:</strong> <span id="deletePostTitle"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    İptal
                </button>
                <form id="deleteForm" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i>Evet, Sil
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Search functionality
        document.getElementById('searchInput').addEventListener('keyup', function() {
            filterTable();
        });

        // Status filter
        document.getElementById('statusFilter').addEventListener('change', function() {
            filterTable();
        });

        // Category filter
        document.getElementById('categoryFilter').addEventListener('change', function() {
            filterTable();
        });

        // Select all checkbox
        document.getElementById('selectAll').addEventListener('change', function() {
            const checkboxes = document.querySelectorAll('.post-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
        });

        // Filter table function
        function filterTable() {
            const searchText = document.getElementById('searchInput').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const categoryFilter = document.getElementById('categoryFilter').value;
            const rows = document.querySelectorAll('#postsTable tbody tr');

            rows.forEach(row => {
                const title = row.cells[1].textContent.toLowerCase();
                const status = row.getAttribute('data-status');
                const categoryId = row.getAttribute('data-category-id');

                let show = true;

                // Search filter
                if (searchText && !title.includes(searchText)) {
                    show = false;
                }

                // Status filter
                if (statusFilter && status !== statusFilter) {
                    show = false;
                }

                // Category filter
                if (categoryFilter && categoryId !== categoryFilter) {
                    show = false;
                }

                row.style.display = show ? '' : 'none';
            });
        }

        // Clear filters
        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('categoryFilter').value = '';
            filterTable();
        }

        // Toggle publish status
        async function togglePublishStatus(postId, checkbox) {
            try {
                const response = await fetch('@Url.Action("TogglePublishStatus")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `id=${postId}&__RequestVerificationToken=${document.querySelector('input[name="__RequestVerificationToken"]').value}`
                });

                const result = await response.json();
                
                if (result.success) {
                    const statusText = document.querySelector(`.status-text-${postId}`);
                    statusText.textContent = result.isPublished ? 'Yayında' : 'Taslak';
                    
                    // Update row data attribute
                    const row = checkbox.closest('tr');
                    row.setAttribute('data-status', result.isPublished ? 'published' : 'draft');
                    
                    // Show success message
                    showMessage(result.message, 'success');
                } else {
                    checkbox.checked = !checkbox.checked;
                    showMessage(result.message, 'error');
                }
            } catch (error) {
                checkbox.checked = !checkbox.checked;
                showMessage('Bir hata oluştu', 'error');
                console.error('Error:', error);
            }
        }

        // Delete post
        function deletePost(postId, postTitle) {
            document.getElementById('deletePostTitle').textContent = postTitle;
            document.getElementById('deleteForm').action = `@Url.Action("DeletePost")/${postId}`;
            
            const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
            modal.show();
        }

        // Show message
        function showMessage(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const icon = type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle';
            
            const alert = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    <i class="fas ${icon} me-2"></i>${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            // Insert at the top of the page
            const container = document.querySelector('.row').nextElementSibling;
            container.insertAdjacentHTML('afterbegin', alert);
        }

        // Bulk operations (to be implemented)
        function bulkPublish() {
            const selected = getSelectedPosts();
            if (selected.length === 0) {
                showMessage('Lütfen işlem yapmak istediğiniz yazıları seçin', 'error');
                return;
            }
            showMessage(`${selected.length} yazı için toplu yayınlama özelliği yakında eklenecek`, 'info');
        }

        function bulkUnpublish() {
            const selected = getSelectedPosts();
            if (selected.length === 0) {
                showMessage('Lütfen işlem yapmak istediğiniz yazıları seçin', 'error');
                return;
            }
            showMessage(`${selected.length} yazı için toplu taslağa çevirme özelliği yakında eklenecek`, 'info');
        }

        function bulkDelete() {
            const selected = getSelectedPosts();
            if (selected.length === 0) {
                showMessage('Lütfen silmek istediğiniz yazıları seçin', 'error');
                return;
            }
            if (confirm(`${selected.length} yazıyı silmek istediğinizden emin misiniz?`)) {
                showMessage('Toplu silme özelliği yakında eklenecek', 'info');
            }
        }

        function getSelectedPosts() {
            const checkboxes = document.querySelectorAll('.post-checkbox:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }

        // Auto-dismiss alerts
        document.addEventListener('DOMContentLoaded', function() {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    const closeButton = alert.querySelector('.btn-close');
                    if (closeButton) {
                        closeButton.click();
                    }
                }, 5000);
            });
        });
    </script>

    <style>
        .table th {
            background-color: #f8f9fc;
            border-top: none;
            font-weight: 600;
            font-size: 0.85rem;
            color: #5a5c69;
        }
        
        .table td {
            vertical-align: middle;
            font-size: 0.9rem;
        }
        
        .badge {
            font-size: 0.75rem;
        }
        
        .btn-group-sm .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.8rem;
        }
        
        .status-toggle {
            cursor: pointer;
        }
        
        .form-switch .form-check-input {
            width: 2em;
            margin-left: 0;
        }
        
        .table-responsive {
            border-radius: 0.375rem;
        }
        
        .card {
            box-shadow: 0 0.15rem 1.75rem 0 rgba(58, 59, 69, 0.15);
            border: none;
        }
        
        .alert {
            border: none;
            border-radius: 0.375rem;
        }
    </style>
}